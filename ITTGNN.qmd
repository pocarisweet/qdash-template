---
title: "Analysis Result of ITTGNN"
author: "JEONGHYEOK KANG"
format: 
    dashboard:
     theme: default
     nav-buttons:
      - icon: github
        href: https://github.com/seoyeonc
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---


```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import itables 
from plotnine import ggplot, aes, geom_boxplot, scale_fill_manual, theme, element_blank, element_text, labs, facet_wrap, scale_x_continuous
import pickle

# GConvGRU
pedal_wiki_GSO_GConvGRU = pd.read_csv('./Data/Final_Simulation_GConvGRU_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvGRU['model']='GConvGRU'

# GConvLSTM
pedal_wiki_GSO_GConvLSTM = pd.read_csv('./Data/Final_Simulation_GConvLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GConvLSTM['model']='GConvLSTM'

# GCLSTM
pedal_wiki_GSO_GCLSTM = pd.read_csv('./Data/Final_Simulation_GCLSTM_pedal_wiki_GSO.csv')
pedal_wiki_GSO_GCLSTM['model']='GCLSTM'

# DCRNN
pedal_wiki_GSO_DCRNN = pd.read_csv('./Data/Final_Simulation_DCRNN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DCRNN['model']='DCRNN'

# LRGCN
pedal_wiki_GSO_LRGCN = pd.read_csv('./Data/Final_Simulation_LRGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_LRGCN['model']='LRGCN'

# TGCN
pedal_wiki_GSO_TGCN = pd.read_csv('./Data/Final_Simulation_TGCN_pedal_wiki_GSO.csv')
pedal_wiki_GSO_TGCN['model']='TGCN'

# EvolveGCNO
pedal_wiki_GSO_EvolveGCNO = pd.read_csv('./Data/Final_Simulation_EvolveGCNO_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNO['model']='EvolveGCNO'

# DYGRENCODER
pedal_wiki_GSO_DYGRENCODER = pd.read_csv('./Data/Final_Simulation_DYGRENCODER_pedal_wiki_GSO.csv')
pedal_wiki_GSO_DYGRENCODER['model']='DyGrEncoder'

# EvolveGCNH
pedal_wiki_GSO_EvolveGCNH = pd.read_csv('./Data/Final_Simulation_EvolveGCNH_pedal_wiki_GSO.csv')
pedal_wiki_GSO_EvolveGCNH['model']='EvolveGCNH'

# GNAR
wiki_GSO_GNAR = pd.read_csv('./Data/Final_Simulation_GNAR_wiki_GSO.csv')
wiki_GSO_GNAR['model']='GNAR'

df = pd.read_csv('./Data/df_fig.csv')

df2 = pd.concat([pedal_wiki_GSO_GConvGRU,pedal_wiki_GSO_GConvLSTM,pedal_wiki_GSO_GCLSTM,pedal_wiki_GSO_DCRNN,pedal_wiki_GSO_LRGCN,pedal_wiki_GSO_TGCN,pedal_wiki_GSO_EvolveGCNO,pedal_wiki_GSO_DYGRENCODER,pedal_wiki_GSO_EvolveGCNH,wiki_GSO_GNAR])

```

# FiveVTS {orientation="columns" scrolling="true"}

## Row {.tabset}


```{python}
#| title: Baseline Data

FiveVTS_baseline = pd.merge(df.query("dataset=='fivenodes' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags','epoch'])['mse'].std().reset_index(),
         on=['model','nof_filters','lags','epoch']).rename(columns={'model':'Model', 'mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'}).drop(columns=['epoch'])[['Model','Filters','lags','Mean','SD']]

itables.show(FiveVTS_baseline)

```

```{python}
#| title: Random Missing Data

FiveVTS_random = pd.merge(df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype=='rand'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].std().reset_index(),
         on=['model','mrate','inter_method','method','nof_filters','lags','epoch']).query("mrate in [0.3, 0.5, 0.6, 0.7, 0.8] and inter_method=='linear'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method','epoch'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(FiveVTS_random)

```


```{python}
#| title: Block Missing Data

FiveVTS_block = pd.merge(df.query("dataset=='fivenodes' and mtype=='block'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].mean().reset_index(),
         df.query("dataset=='fivenodes' and mtype=='block'").groupby(['model','mrate','nof_filters','inter_method','method','lags','epoch'])['mse'].std().reset_index(),
         on=['model','inter_method','method','nof_filters','mrate','lags','epoch']).query("inter_method=='linear'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method','epoch'])
itables.show(FiveVTS_block)

```


# Chickenpox {orientation="columns" scrolling="true"}

## Row {.tabset}

```{python}
#| title: Baseline Data

Chickenpox_baseline = pd.merge(df.query("dataset=='chickenpox' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype!='rand' and mtype!='block'").groupby(['model','nof_filters','lags'])['mse'].std().reset_index(),
         on=['model','nof_filters','lags']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'})[['Model','Filters','lags','Mean','SD']]
itables.show(Chickenpox_baseline)
         

```

```{python}
#| title: Random Missing Data

Chickenpox_random = pd.merge(df.query("dataset=='chickenpox' and mtype=='rand'").groupby(['model','mrate','inter_method','nof_filters','method','lags'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype=='rand'").groupby(['model','mrate','inter_method','nof_filters','method','lags'])['mse'].std().reset_index(),
         on=['model','method','inter_method','mrate','nof_filters','lags']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters','lag_x':'lag'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(Chickenpox_random)
```

```{python}
#| title: Block Missing Data

Chickenpox_block = pd.merge(df.query("dataset=='chickenpox' and mtype=='block'").groupby(['model','inter_method','mrate','nof_filters','method','lags'])['mse'].mean().reset_index(),
         df.query("dataset=='chickenpox' and mtype=='block'").groupby(['model','inter_method','mrate','nof_filters','method','lags'])['mse'].std().reset_index(),
         on=['model','method','inter_method','mrate','nof_filters','lags']).query("inter_method=='linear'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters','lag_x':'lag'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(Chickenpox_block)


```



# Pedalme {orientation="columns" scrolling="true"}

## Row {.tabset}

```{python}
#| title: Baseline Data

Pedalme_baseline = pd.merge(df.query("dataset=='pedalme' and mtype!='rand' and mtype!='block'").groupby(['model','lags','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype!='rand' and mtype!='block'").groupby(['model','lags','nof_filters'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'}).query("lags==4")[['Model','Filters','lags','Mean','SD']]
        
itables.show(Pedalme_baseline)

```

```{python}
#| title: Random Missing Data

Pedalme_Random = pd.merge(df.query("dataset=='pedalme' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','lags','inter_method','nof_filters']).query("inter_method=='nearest'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(Pedalme_Random)

```



```{python}
#| title: Block Missing Data

Pedalme_block = pd.merge(df.query("dataset=='pedalme' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='pedalme' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','lags','inter_method','nof_filters']).query("lags==4 and inter_method=='nearest'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(Pedalme_block)

```



# Wikimath {orientation="columns" scrolling="true"}

## Row {.tabset}

```{python}
#| title: Baseline Data

Wikimath_baseline = pd.merge(df.query("dataset=='wikimath' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'})[['Model','Filters','lags','Mean','SD']]

itables.show(Wikimath_baseline)

```

```{python}
#| title: Random Missing Data

Wikimath_random = pd.merge(df.query("dataset=='wikimath' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]

itables.show(Wikimath_random)
```



```{python}
#| title: Block Missing Data

Wikimath_block = pd.merge(df.query("dataset=='wikimath' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='wikimath' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]
itables.show(Wikimath_block)

```




# Windmillsmall {orientation="columns" scrolling="true"}

## Row {.tabset}

```{python}
#| title: Baseline Data

Windmillsmall_baseline = pd.merge(df.query("dataset=='windmillsmall' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'})[['Model','Filters','lags','Mean','SD']]
itables.show(Windmillsmall_baseline)

```

```{python}
#| title: Random Missing Data

Windmillsmall_random = pd.merge(df.query("dataset=='windmillsmall' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mtype=='rand'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]

itables.show(Windmillsmall_random)
```


```{python}
#| title: Block Missing Data

Windmillsmall_block = pd.merge(df.query("dataset=='windmillsmall' and mtype=='block'").groupby(['model','mrate','nof_filters','lags','method','inter_method'])['mse'].mean().reset_index(),
         df.query("dataset=='windmillsmall' and mtype=='block'").groupby(['model','mrate','nof_filters','lags','method','inter_method'])['mse'].std().reset_index(),
         on=['model','method','nof_filters','mrate','lags','inter_method']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]

itables.show(Windmillsmall_block)
```



# MontevideoBus {orientation="columns" scrolling="true"}

## Row {.tabset}

```{python}
#| title: Baseline Data
MontevideoBus_baseline = pd.merge(df.query("dataset=='monte' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mrate==0").groupby(['model','lags','nof_filters'])['mse'].std().reset_index(),
         on=['model','lags','nof_filters']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','nof_filters':'Filters'})[['Model','Filters','lags','Mean','SD']]

itables.show(MontevideoBus_baseline)         
```

```{python}
#| title: Random Missing Data

MontevideoBus_random = pd.merge(df.query("dataset=='monte' and mtype=='rand'").groupby(['model','mrate','nof_filters','lags','inter_method','method'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mtype=='rand'").groupby(['model','mrate','nof_filters','lags','inter_method','method'])['mse'].std().reset_index(),
         on=['model','mrate','nof_filters','inter_method','method','mrate','lags']).rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]

itables.show(MontevideoBus_random)
```



```{python}

#| title: Block Missing Data

MontevideoBus_block = pd.merge(df.query("dataset=='monte' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].mean().reset_index(),
         df.query("dataset=='monte' and mtype=='block'").groupby(['model','mrate','lags','inter_method','method','nof_filters'])['mse'].std().reset_index(),
         on=['model','method','mrate','inter_method','lags','nof_filters']).query("inter_method=='nearest'").rename(columns={'model':'Model','mse_x':'Mean','mse_y':'SD','mrate':'Missing Rate','inter_method':'Interpolation','nof_filters':'Filters'}).assign(Method=lambda x: x['method'].map({'STGCN': 'Classic', 'IT-STGCN': 'Proposed','GNAR':'GNAR'})).drop(columns=['method'])[['Model','Filters','lags','Missing Rate','Method','Interpolation','Mean','SD']]

itables.show(MontevideoBus_block)
```



# Random Missing Figure

## Row {.tabset}

```{python}
#| title: FiveVTS

with open('Fig/fivenodes_fig.pkl', 'rb') as file:
    fivenodes_fig = pickle.load(file)

fivenodes_fig.show()

```

```{python}
#| title: Chickenpox

with open('Fig/chickenpox_fig.pkl', 'rb') as file:
    chickenpox_fig = pickle.load(file)

chickenpox_fig.show()

```


```{python}
#| title: Pedalme

with open('Fig/pedalme_fig.pkl', 'rb') as file:
    pedalme_fig = pickle.load(file)

pedalme_fig.show()

```


```{python}
#| title: Wikimath

with open('Fig/wikimath_fig.pkl', 'rb') as file:
    wikimath_fig = pickle.load(file)

wikimath_fig.show()

```




```{python}
#| title: Windmillsmall

with open('Fig/windmillsmall_fig.pkl', 'rb') as file:
    windmillsmall_fig = pickle.load(file)

windmillsmall_fig.show()


```



```{python}
#| title: MontevideoBus

with open('Fig/monte_fig.pkl', 'rb') as file:
    monte_fig = pickle.load(file)

monte_fig.show()


```
